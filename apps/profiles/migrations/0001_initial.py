# Generated by Django 5.1 on 2024-09-06 09:57

import apps.profiles.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Convention',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cnpj', models.CharField(help_text='Insira aqui o CNPJ do convênio.', max_length=18, verbose_name='CNPJ')),
                ('name', models.CharField(help_text='Insira aqui o nome fantasia da pessoa jurídica.', max_length=100, verbose_name='Nome Fantasia')),
                ('state_registration', models.CharField(help_text='Insira aqui a inscrição estadual da pessoa jurídica.', max_length=100, verbose_name='Inscrição Estadual')),
                ('city_registration', models.CharField(help_text='Insira aqui a inscrição municipal da pessoa jurídica.', max_length=100, verbose_name='Inscrição Municipal')),
                ('convention_reference', models.CharField(help_text='Crie um código para identificar o convênio, o mesmo deve ser único e não pode ser alterado posteriormente.', max_length=15, unique=True, verbose_name='Referência Externa')),
                ('contract_convention', models.FileField(blank=True, help_text='Insira aqui o contrato de convênio.', null=True, upload_to='', verbose_name='Contrato de Convênio')),
                ('asaas_token', models.CharField(blank=True, help_text='Insira aqui o token da Asaas do convênio.', max_length=100, null=True, verbose_name='Token Asaas')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Convênio',
                'verbose_name_plural': 'Convênios',
            },
        ),
        migrations.CreateModel(
            name='EducationalInstitution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Insira aqui o nome da instituição.', max_length=100, verbose_name='Nome da Instituição')),
                ('cnpj', models.CharField(help_text='Insira aqui o CNPJ da instituição.', max_length=18, verbose_name='CNPJ')),
                ('type', models.CharField(choices=[('E', 'Escola - Ensino Fundamental'), ('C', 'Colégio - Ensino Médio'), ('S', 'Instituição de Ensino Superior')], help_text='Selecione o tipo de instituição.', max_length=1, verbose_name='Tipo de Instituição')),
                ('nature', models.CharField(choices=[('P', 'Pública'), ('R', 'Privada')], help_text='Selecione a natureza da instituição.', max_length=1, verbose_name='Natureza da Instituição')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Instituição de Ensino',
                'verbose_name_plural': 'Instituições de Ensino',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Insira seu nome completo.', max_length=100, validators=[apps.profiles.validators.validate_name], verbose_name='Nome')),
                ('birth_date', models.DateField(help_text='Insira aqui o dia, mês e ano em que você nasceu.', validators=[apps.profiles.validators.validate_birthdate], verbose_name='Data de Nascimento')),
                ('cpf', models.CharField(help_text='Insira aqui os números do seu CPF.', max_length=14, unique=True, validators=[apps.profiles.validators.validate_cpf], verbose_name='CPF - Cadastro de Pessoa Física')),
                ('phone', models.CharField(help_text='Insira aqui qual o número do seu telefone com o DDD. Atenção, é necessário whatsapp ativo para validar o número.', max_length=11, unique=True, validators=[apps.profiles.validators.validate_phone], verbose_name='Telefone')),
                ('email', models.EmailField(help_text='Insira aqui o email que você deseja receber as notificações.', max_length=100, unique=True, validators=[apps.profiles.validators.validate_email], verbose_name='Email')),
                ('gender', models.CharField(choices=[('M', 'Masculino'), ('F', 'Feminino')], help_text='Selecione qual seu sexo.', max_length=1, verbose_name='Gênero (Sexo)')),
                ('civil_status', models.CharField(choices=[('S', 'Solteiro(a)'), ('C', 'Casado(a)'), ('D', 'Divorciado(a)'), ('V', 'Viúvo(a)')], help_text='Selecione qual seu estado civil.', max_length=1, verbose_name='Estado Civil')),
                ('civil_certificate_type', models.CharField(choices=[('S', 'Certidão de Nascimento'), ('C', 'Certidao de Casamento'), ('D', 'Certidão de Averbação de Divórcio'), ('V', 'Certidão de Casamento')], help_text='Selecione o tipo de certificado civil.', max_length=1, verbose_name='Certificado Civil')),
                ('civil_certificate', models.CharField(blank=True, help_text='Insira a certidão de nascimento, casamento ou divórcio  .', null=True, verbose_name='Certificado Civil')),
                ('instruction_level', models.CharField(choices=[('F', 'Ensino Fundamental'), ('M', 'Ensino Médio'), ('G', 'Ensino Superior - Graduação'), ('P', 'Ensino Superior - Pós-Graduação')], help_text='Selecione qual seu nível de escolaridade.', max_length=1, verbose_name='Escolaridade')),
                ('mother_name', models.CharField(help_text='Insira o nome completo da sua mãe.', max_length=100, verbose_name='Nome da Mãe')),
                ('birth_state', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], help_text='Selecione o estado onde você nasceu.', max_length=2, verbose_name='Estado de Nascimento')),
                ('birth_city', models.CharField(help_text='Selecione a cidade onde você nasceu.', max_length=100, verbose_name='Cidade de Nascimento')),
                ('document_type', models.CharField(choices=[('R', 'RG'), ('C', 'CNH'), ('P', 'Passaporte')], help_text='Selecione o tipo de documento.', max_length=1, verbose_name='Tipo de Documento')),
                ('document', models.CharField(help_text='Insira o documento de identificação.', verbose_name='Documento')),
                ('photo', models.CharField(blank=True, help_text='Insira uma foto do perfil.', null=True, verbose_name='Foto')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Perfil',
                'verbose_name_plural': 'Perfis',
            },
        ),
        migrations.CreateModel(
            name='ConventionAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(help_text='Insira aqui o nome da rua, avenida, etc.', max_length=100, verbose_name='Rua')),
                ('number', models.CharField(help_text='Insira aqui o número do local.', max_length=10, verbose_name='Número')),
                ('complement', models.CharField(blank=True, help_text='Insira aqui o complemento do local, se houver.', max_length=100, verbose_name='Complemento')),
                ('neighborhood', models.CharField(help_text='Insira aqui o bairro do local.', max_length=100, verbose_name='Bairro')),
                ('city', models.CharField(help_text='Insira aqui a cidade do local.', max_length=100, verbose_name='Cidade')),
                ('state', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], help_text='Selecione o estado do local.', max_length=2, verbose_name='Estado')),
                ('zip_code', models.CharField(help_text='Insira aqui o CEP do local.', max_length=9, verbose_name='CEP')),
                ('type', models.CharField(choices=[('C', 'Casa'), ('T', 'Trabalho'), ('O', 'Outro'), ('S', 'Sede'), ('F', 'Filial')], help_text='Selecione o tipo de endereço do local.', max_length=1, verbose_name='Tipo de Endereço')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('address_comprovation', models.FileField(blank=True, help_text='Insira aqui o comprovante de endereço, como conta de luz, água, etc.', null=True, upload_to='convention_address_comprovations/', verbose_name='Comprovante de Endereço')),
                ('convention', models.ForeignKey(help_text='Selecione o convênio que o endereço pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='profiles.convention', verbose_name='Convênio')),
            ],
            options={
                'verbose_name': 'Endereço do Convênio',
                'verbose_name_plural': 'Endereços dos Convênios',
            },
        ),
        migrations.CreateModel(
            name='EducationalInstitutionAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(help_text='Insira aqui o nome da rua, avenida, etc.', max_length=100, verbose_name='Rua')),
                ('number', models.CharField(help_text='Insira aqui o número do local.', max_length=10, verbose_name='Número')),
                ('complement', models.CharField(blank=True, help_text='Insira aqui o complemento do local, se houver.', max_length=100, verbose_name='Complemento')),
                ('neighborhood', models.CharField(help_text='Insira aqui o bairro do local.', max_length=100, verbose_name='Bairro')),
                ('city', models.CharField(help_text='Insira aqui a cidade do local.', max_length=100, verbose_name='Cidade')),
                ('state', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], help_text='Selecione o estado do local.', max_length=2, verbose_name='Estado')),
                ('zip_code', models.CharField(help_text='Insira aqui o CEP do local.', max_length=9, verbose_name='CEP')),
                ('type', models.CharField(choices=[('C', 'Casa'), ('T', 'Trabalho'), ('O', 'Outro'), ('S', 'Sede'), ('F', 'Filial')], help_text='Selecione o tipo de endereço do local.', max_length=1, verbose_name='Tipo de Endereço')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('educational_institution', models.ForeignKey(help_text='Selecione a instituição de ensino que o endereço pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='profiles.educationalinstitution', verbose_name='Instituição de Ensino')),
            ],
            options={
                'verbose_name': 'Endereço da Instituição de Ensino',
                'verbose_name_plural': 'Endereços das Instituições de Ensino',
            },
        ),
        migrations.CreateModel(
            name='PostGraduationData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('B', 'Bacharelado'), ('L', 'Licenciatura'), ('T', 'Tecnólogo')], help_text='Selecione o tipo de graduação.', max_length=1, verbose_name='Tipo de Graduação')),
                ('status', models.CharField(choices=[('C', 'Cursando'), ('F', 'Concluído'), ('X', 'Cancelado'), ('T', 'Trancado')], help_text='Selecione a situação da escolaridade.', max_length=1, verbose_name='Situação da Escolaridade')),
                ('start_date', models.DateField(help_text='Insira aqui a data de início da escolaridade.', verbose_name='Data de Início')),
                ('end_date', models.DateField(blank=True, help_text='Insira aqui a data de conclusão da escolaridade.', null=True, verbose_name='Data de Conclusão')),
                ('document_historic', models.FileField(help_text='Insira aqui o documento do histórico escolar.', upload_to='education_historics/', verbose_name='Histórico Escolar')),
                ('document_certificate', models.FileField(help_text='Insira aqui o documento do certificado/diploma.', upload_to='education_certificates/', verbose_name='Certificado')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('course', models.CharField(help_text='Insira o nome do curso.', max_length=100, verbose_name='Curso')),
                ('graduation_type', models.CharField(choices=[('D', 'Doutorado'), ('M', 'Mestrado'), ('P', 'Pós-Doutorado')], help_text='Selecione o tipo de pós-graduação.', max_length=1, verbose_name='Tipo de Pós-Graduação')),
                ('educational_institution', models.ForeignKey(help_text='Selecione a instituição de ensino que a escolaridade pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_profiles', to='profiles.educationalinstitution', verbose_name='Instituição de Ensino')),
                ('profile', models.ForeignKey(help_text='Selecione o perfil que a pós-graduação pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='post_graduation_data', to='profiles.profile', verbose_name='Perfil')),
            ],
            options={
                'verbose_name': 'Pós-Graduação',
                'verbose_name_plural': 'Pós-Graduações',
            },
        ),
        migrations.CreateModel(
            name='MiddleSchoolData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('B', 'Bacharelado'), ('L', 'Licenciatura'), ('T', 'Tecnólogo')], help_text='Selecione o tipo de graduação.', max_length=1, verbose_name='Tipo de Graduação')),
                ('status', models.CharField(choices=[('C', 'Cursando'), ('F', 'Concluído'), ('X', 'Cancelado'), ('T', 'Trancado')], help_text='Selecione a situação da escolaridade.', max_length=1, verbose_name='Situação da Escolaridade')),
                ('start_date', models.DateField(help_text='Insira aqui a data de início da escolaridade.', verbose_name='Data de Início')),
                ('end_date', models.DateField(blank=True, help_text='Insira aqui a data de conclusão da escolaridade.', null=True, verbose_name='Data de Conclusão')),
                ('document_historic', models.FileField(help_text='Insira aqui o documento do histórico escolar.', upload_to='education_historics/', verbose_name='Histórico Escolar')),
                ('document_certificate', models.FileField(help_text='Insira aqui o documento do certificado/diploma.', upload_to='education_certificates/', verbose_name='Certificado')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('educational_institution', models.ForeignKey(help_text='Selecione a instituição de ensino que a escolaridade pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_profiles', to='profiles.educationalinstitution', verbose_name='Instituição de Ensino')),
                ('profile', models.ForeignKey(help_text='Selecione o perfil que a escola pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='middle_school_data', to='profiles.profile', verbose_name='Perfil')),
            ],
            options={
                'verbose_name': 'Ensino Médio',
                'verbose_name_plural': 'Ensino Médio',
            },
        ),
        migrations.CreateModel(
            name='GraduationData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('B', 'Bacharelado'), ('L', 'Licenciatura'), ('T', 'Tecnólogo')], help_text='Selecione o tipo de graduação.', max_length=1, verbose_name='Tipo de Graduação')),
                ('status', models.CharField(choices=[('C', 'Cursando'), ('F', 'Concluído'), ('X', 'Cancelado'), ('T', 'Trancado')], help_text='Selecione a situação da escolaridade.', max_length=1, verbose_name='Situação da Escolaridade')),
                ('start_date', models.DateField(help_text='Insira aqui a data de início da escolaridade.', verbose_name='Data de Início')),
                ('end_date', models.DateField(blank=True, help_text='Insira aqui a data de conclusão da escolaridade.', null=True, verbose_name='Data de Conclusão')),
                ('document_historic', models.FileField(help_text='Insira aqui o documento do histórico escolar.', upload_to='education_historics/', verbose_name='Histórico Escolar')),
                ('document_certificate', models.FileField(help_text='Insira aqui o documento do certificado/diploma.', upload_to='education_certificates/', verbose_name='Certificado')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('course', models.CharField(help_text='Insira o nome do curso.', max_length=100, verbose_name='Curso')),
                ('educational_institution', models.ForeignKey(help_text='Selecione a instituição de ensino que a escolaridade pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_profiles', to='profiles.educationalinstitution', verbose_name='Instituição de Ensino')),
                ('profile', models.ForeignKey(help_text='Selecione o perfil que a graduação pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='graduation_data', to='profiles.profile', verbose_name='Perfil')),
            ],
            options={
                'verbose_name': 'Graduação',
                'verbose_name_plural': 'Graduações',
            },
        ),
        migrations.CreateModel(
            name='ElementarySchoolData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('B', 'Bacharelado'), ('L', 'Licenciatura'), ('T', 'Tecnólogo')], help_text='Selecione o tipo de graduação.', max_length=1, verbose_name='Tipo de Graduação')),
                ('status', models.CharField(choices=[('C', 'Cursando'), ('F', 'Concluído'), ('X', 'Cancelado'), ('T', 'Trancado')], help_text='Selecione a situação da escolaridade.', max_length=1, verbose_name='Situação da Escolaridade')),
                ('start_date', models.DateField(help_text='Insira aqui a data de início da escolaridade.', verbose_name='Data de Início')),
                ('end_date', models.DateField(blank=True, help_text='Insira aqui a data de conclusão da escolaridade.', null=True, verbose_name='Data de Conclusão')),
                ('document_historic', models.FileField(help_text='Insira aqui o documento do histórico escolar.', upload_to='education_historics/', verbose_name='Histórico Escolar')),
                ('document_certificate', models.FileField(help_text='Insira aqui o documento do certificado/diploma.', upload_to='education_certificates/', verbose_name='Certificado')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('educational_institution', models.ForeignKey(help_text='Selecione a instituição de ensino que a escolaridade pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_profiles', to='profiles.educationalinstitution', verbose_name='Instituição de Ensino')),
                ('profile', models.ForeignKey(help_text='Selecione o perfil que a escola pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='elementary_school_data', to='profiles.profile', verbose_name='Perfil')),
            ],
            options={
                'verbose_name': 'Ensino Fundamental',
                'verbose_name_plural': 'Ensino Fundamental',
            },
        ),
        migrations.AddField(
            model_name='convention',
            name='profile',
            field=models.ForeignKey(help_text='Selecione o perfil que o convênio pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='conventions', to='profiles.profile', verbose_name='Perfil'),
        ),
        migrations.CreateModel(
            name='ProfileAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(help_text='Insira aqui o nome da rua, avenida, etc.', max_length=100, verbose_name='Rua')),
                ('number', models.CharField(help_text='Insira aqui o número do local.', max_length=10, verbose_name='Número')),
                ('complement', models.CharField(blank=True, help_text='Insira aqui o complemento do local, se houver.', max_length=100, verbose_name='Complemento')),
                ('neighborhood', models.CharField(help_text='Insira aqui o bairro do local.', max_length=100, verbose_name='Bairro')),
                ('city', models.CharField(help_text='Insira aqui a cidade do local.', max_length=100, verbose_name='Cidade')),
                ('state', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], help_text='Selecione o estado do local.', max_length=2, verbose_name='Estado')),
                ('zip_code', models.CharField(help_text='Insira aqui o CEP do local.', max_length=9, verbose_name='CEP')),
                ('type', models.CharField(choices=[('C', 'Casa'), ('T', 'Trabalho'), ('O', 'Outro'), ('S', 'Sede'), ('F', 'Filial')], help_text='Selecione o tipo de endereço do local.', max_length=1, verbose_name='Tipo de Endereço')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('resident_comprovation', models.FileField(blank=True, help_text='Insira aqui o comprovante de residência, como conta de luz, água, etc.', null=True, upload_to='resident_comprovations/', verbose_name='Comprovante de Residência')),
                ('profile', models.ForeignKey(help_text='Selecione o perfil que o endereço pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='profiles.profile', verbose_name='Perfil')),
            ],
            options={
                'verbose_name': 'Endereço',
                'verbose_name_plural': 'Endereços',
            },
        ),
        migrations.CreateModel(
            name='Promoter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('promoter_reference', models.CharField(help_text='Crie um código para identificar o promotor, o mesmo deve ser único e não pode ser alterado posteriormente.', max_length=15, unique=True, verbose_name='Referência Externa')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('contract_promoter', models.FileField(blank=True, help_text='Insira aqui o contrato de acordo com promotor.', null=True, upload_to='', verbose_name='Contrato')),
                ('mercadopago_token', models.CharField(blank=True, help_text='Insira aqui o token do Mercado Pago do promotor.', max_length=100, null=True, verbose_name='Token Mercado Pago')),
                ('convention', models.ForeignKey(blank=True, help_text='Selecione o convênio que o promotor pertence.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='promoters', to='profiles.convention', verbose_name='Convênio')),
                ('profile', models.ForeignKey(blank=True, help_text='Selecione o perfil que o promotor pertence.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='promoters', to='profiles.profile', verbose_name='Perfil')),
            ],
            options={
                'verbose_name': 'Promotor',
                'verbose_name_plural': 'Promotores',
            },
        ),
    ]
